/* Generated by AN DISI Unibo */ 
package it.unibo.tempsag

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Tempsag ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Ticket: String = ""  
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outyellow("SAG: requesting ticket")
						request("storerequest", "storerequest(5)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="reply",cond=whenReply("loadaccepted"))
				}	 
				state("reply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadaccepted(TICKET)"), Term.createTerm("loadaccepted(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outyellow("SAG: ${payloadArg(0)}")
								 Ticket = payloadArg(0)  
						}
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="insertticket", cond=doswitch() )
				}	 
				state("insertticket") { //this:State
					action { //it:State
						request("insertticket", "insertticket($Ticket)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="confirm",cond=whenReply("ticketaccepted"))
				}	 
				state("confirm") { //this:State
					action { //it:State
						CommUtils.outyellow("SAG: confirmed ticket")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
} 
