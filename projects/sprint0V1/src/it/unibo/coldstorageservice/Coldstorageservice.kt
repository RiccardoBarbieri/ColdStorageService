/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerequest(arg)"), Term.createTerm("storerequest(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("storerequest", "loadaccepted", "loadaccepted(_)"   )  
								forward("deposit", "deposit(_)" ,"transporttrolley" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="finalizeDeposit",cond=whenDispatch("chargetakentt"))
				}	 
				state("finalizeDeposit") { //this:State
					action { //it:State
						request("chargetaken", "chargetaken(_)" ,"serviceaccessgui" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleRequest",cond=whenRequest("storerequest"))
					transition(edgeName="t02",targetState="distance",cond=whenDispatch("distanceupdate"))
				}	 
				state("distance") { //this:State
					action { //it:State
						if(  True  
						 ){forward("stop", "stop(_)" ,"transporttrolley" ) 
						}
						else
						 {forward("resume", "resume(_)" ,"transporttrolley" ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
