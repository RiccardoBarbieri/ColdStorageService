/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Serviceaccessgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("SAG: started")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_s0", 
				 	 					  scope, context!!, "local_tout_serviceaccessgui_s0", 10000.toLong() )
					}	 	 
					 transition(edgeName="t03",targetState="sendRequest",cond=whenTimeout("local_tout_serviceaccessgui_s0"))   
				}	 
				state("sendRequest") { //this:State
					action { //it:State
						request("storerequest", "storerequest(_)" ,"coldstorageservice" )  
						CommUtils.outmagenta("SAG: sending a new storage request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outmagenta("SAG: waiting for replies")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_waiting", 
				 	 					  scope, context!!, "local_tout_serviceaccessgui_waiting", 5000.toLong() )
					}	 	 
					 transition(edgeName="t04",targetState="timeout",cond=whenTimeout("local_tout_serviceaccessgui_waiting"))   
					transition(edgeName="t05",targetState="handleLoadAccept",cond=whenReply("loadaccepted"))
					transition(edgeName="t06",targetState="handleLoadReject",cond=whenReply("loadrejected"))
					transition(edgeName="t07",targetState="handleTicketAccept",cond=whenReply("ticketaccepted"))
					transition(edgeName="t08",targetState="handleTicketReject",cond=whenReply("ticketrejected"))
					transition(edgeName="t09",targetState="handleChargeTaken",cond=whenReply("chargetaken"))
				}	 
				state("handleLoadAccept") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadaccepted(arg)"), Term.createTerm("loadaccepted(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("SAG: load accepted, going to INDOOR")
								delay(5000) 
								request("deposit", "deposit(_)" ,"coldstorageservice" )  
								CommUtils.outmagenta("SAG: inserting the ticket number")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("handleLoadReject") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrejected(arg)"), Term.createTerm("loadrejected(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("SAG: load request rejected")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("handleTicketAccept") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketaccepted(arg)"), Term.createTerm("ticketaccepted(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("SAG: ticket accepted, waiting for charge taken")
								request("chargestatus", "chargestatus(_)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("handleTicketReject") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketrejected(arg)"), Term.createTerm("ticketrejected(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("SAG: ticket number rejected")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("handleChargeTaken") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("chargetaken(arg)"), Term.createTerm("chargetaken(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("SAG: charge taken")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("timeout") { //this:State
					action { //it:State
						CommUtils.outmagenta("SAG: connection with the service timed out")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_timeout", 
				 	 					  scope, context!!, "local_tout_serviceaccessgui_timeout", 3000.toLong() )
					}	 	 
					 transition(edgeName="t010",targetState="end",cond=whenTimeout("local_tout_serviceaccessgui_timeout"))   
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outmagenta("SAG: life-cycle ended")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
