/* Generated by AN DISI Unibo */ 
package it.unibo.sonarrec

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Sonarrec ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			val DLIMT = 20
				var StoppedBySonar = false
		
		 		var brokerAddr = "tcp://mqtt.eclipseprojects.io"
				mqtt.connect(name, brokerAddr)
				mqtt.subscribe(this, "unibo/sonar/events")
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("SR: initialized")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t039",targetState="checkDistance",cond=whenEvent("distance"))
				}	 
				state("checkDistance") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(DIST)"), Term.createTerm("distance(DIST)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Distance: Float = payloadArg(0).toFloat()  
								if(  Distance > DLIMT  
								 ){if(  StoppedBySonar  
								 ){forward("sonarstart", "sonarstart(arg)" ,"coldstorageservice" ) 
								 StoppedBySonar = false  
								}
								}
								else
								 {if(  !StoppedBySonar  
								  ){forward("sonarstop", "sonarstop(arg)" ,"coldstorageservice" ) 
								  StoppedBySonar = true  
								 CommUtils.outyellow("SR: stopping trolley")
								 }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
} 
