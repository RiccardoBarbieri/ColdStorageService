/* Generated by AN DISI Unibo */ 
package it.unibo.trolleyexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Trolleyexecutor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var isMoving = false
				var wasMoving = false
				
				var destinations = mutableListOf<Pair<Int,Int>>()
				
				var LastX: String = ""
				var LastY: String = ""
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: trolleyexecutor initialized")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						request("engage", "engage(trolleyexecutor,300)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_engage", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_engage", 10000.toLong() )
					}	 	 
					 transition(edgeName="t016",targetState="engageFail",cond=whenTimeout("local_tout_trolleyexecutor_engage"))   
					transition(edgeName="t017",targetState="setState",cond=whenReply("engagedone"))
					transition(edgeName="t018",targetState="engageFail",cond=whenReply("engagerefused"))
				}	 
				state("sonarInterrupt") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: interrupted by sonar")
						if(  isMoving  
						 ){ wasMoving = true  
						}
						else
						 { wasMoving = false  
						 }
						emit("alarm", "alarm(arg)" ) 
						 isMoving = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="sonarRestart",cond=whenDispatchGuarded("sonarstart",{ wasMoving  
					}))
					transition(edgeName="t020",targetState="waiting",cond=whenDispatchGuarded("sonarstart",{ !wasMoving  
					}))
				}	 
				state("sonarRestart") { //this:State
					action { //it:State
						CommUtils.outblack("TE: restarted by sonar")
						request("move", "move($LastX,$LastY)" ,"trolleyexecutor" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="move",cond=whenRequest("move"))
				}	 
				state("engageFail") { //this:State
					action { //it:State
						 val ErrorString = "Ingaggiorobotfallito"  
						forward("fail", "fail($ErrorString)" ,"transporttrolley" ) 
						CommUtils.outmagenta("TE: engage with robot failed, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("moveFail") { //this:State
					action { //it:State
						answer("move", "movefailed", "movecfailed(arg)"   )  
						CommUtils.outmagenta("TE: moverobot failed, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("movecFail") { //this:State
					action { //it:State
						answer("move", "movefailed", "movecfailed(arg)"   )  
						CommUtils.outmagenta("TE: moverobot failed, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("timeout") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: connection with basicrobot timed out")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("setState") { //this:State
					action { //it:State
						forward("setrobotstate", "setpos(0,0,d)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: waiting")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="move",cond=whenRequest("move"))
					transition(edgeName="t023",targetState="stop",cond=whenRequestGuarded("moveclosest",{ isMoving  
					}))
					transition(edgeName="t024",targetState="askPosition",cond=whenRequestGuarded("moveclosest",{ !isMoving  
					}))
					interrupthandle(edgeName="t025",targetState="sonarInterrupt",cond=whenDispatch("sonarstop"),interruptedStateTransitions)
				}	 
				state("move") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: move")
						if( checkMsgContent( Term.createTerm("move(X,Y)"), Term.createTerm("move(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									val X = payloadArg(0)
												val Y = payloadArg(1)
												LastX = X
												LastY = Y
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
								 isMoving = true  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_move", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_move", 30000.toLong() )
					}	 	 
					 transition(edgeName="t026",targetState="timeout",cond=whenTimeout("local_tout_trolleyexecutor_move"))   
					transition(edgeName="t027",targetState="stop",cond=whenRequest("moveclosest"))
					transition(edgeName="t028",targetState="moveCompleted",cond=whenReply("moverobotdone"))
					transition(edgeName="t029",targetState="moveFail",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t030",targetState="sonarInterrupt",cond=whenDispatch("sonarstop"),interruptedStateTransitions)
				}	 
				state("stop") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: stop")
						if( checkMsgContent( Term.createTerm("moveclosest(Xs,Ys)"), Term.createTerm("moveclosest(Xs,Ys)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 destinations = utils.PosUtils.destStringListToPairs(payloadArg(0), payloadArg(1))  
								if(  isMoving  
								 ){emit("alarm", "alarm(arg)" ) 
								 isMoving = false  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_stop", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_stop", 500.toLong() )
					}	 	 
					 transition(edgeName="t031",targetState="askPosition",cond=whenTimeout("local_tout_trolleyexecutor_stop"))   
					transition(edgeName="t032",targetState="askPosition",cond=whenReply("moverobotfailed"))
				}	 
				state("askPosition") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: askPosition")
						if( checkMsgContent( Term.createTerm("moveclosest(Xs,Ys)"), Term.createTerm("moveclosest(Xs,Ys)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 destinations = utils.PosUtils.destStringListToPairs(payloadArg(0), payloadArg(1))  
						}
						request("getrobotstate", "getrobotstate(arg)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_askPosition", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_askPosition", 30000.toLong() )
					}	 	 
					 transition(edgeName="t033",targetState="timeout",cond=whenTimeout("local_tout_trolleyexecutor_askPosition"))   
					transition(edgeName="t034",targetState="moveClosest",cond=whenReply("robotstate"))
				}	 
				state("moveClosest") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: moveClosest")
						if( checkMsgContent( Term.createTerm("robotstate(POS,DIR)"), Term.createTerm("robotstate(POS,DIR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									val position = utils.PosUtils.posStringToPair(payloadArg(0).trim())
												
												val closest = utils.PosUtils.closestDestination(position, destinations)
												val X = closest.first
												val Y = closest.second
												LastX = X.toString()
												LastY = Y.toString()
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
								 isMoving = true  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_moveClosest", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_moveClosest", 30000.toLong() )
					}	 	 
					 transition(edgeName="t035",targetState="timeout",cond=whenTimeout("local_tout_trolleyexecutor_moveClosest"))   
					transition(edgeName="t036",targetState="movecCompleted",cond=whenReply("moverobotdone"))
					transition(edgeName="t037",targetState="movecFail",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t038",targetState="sonarInterrupt",cond=whenDispatch("sonarstop"),interruptedStateTransitions)
				}	 
				state("moveCompleted") { //this:State
					action { //it:State
						 isMoving = false  
						CommUtils.outmagenta("TE: moveCompleted")
						answer("move", "movedone", "movedone(arg)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("movecCompleted") { //this:State
					action { //it:State
						 isMoving = false  
						CommUtils.outmagenta("TE: movecCompleted")
						answer("moveclosest", "movecdone", "movecdone(arg)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("disengage") { //this:State
					action { //it:State
						forward("disengage", "disengage(arg)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
