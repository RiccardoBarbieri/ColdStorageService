/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Coldstorageservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var TICKETTIME = 30
				var MAXW = 100
				var CurrentColdRoom = 0f
				var TicketMap : HashMap<String, Pair<Float, Long>> = HashMap<String, Pair<Float, Long>>()
				var TicketList : MutableList<String> = mutableListOf<String>()
				var ReqRejected = 0
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="elabStorerequest",cond=whenRequest("storerequest"))
					transition(edgeName="t01",targetState="elabCodeentered",cond=whenRequest("codeentered"))
					transition(edgeName="t02",targetState="elabChargetaken",cond=whenDispatch("chargetakentt"))
					transition(edgeName="t03",targetState="elabChargedeposited",cond=whenDispatch("chargedeposited"))
				}	 
				state("elabStorerequest") { //this:State
					action { //it:State
							var CurrentTime = 0L
									var CurrentTicket = ""
									fun generateNextTicket(existingMap: HashMap<String, Pair<Float, Long>>): String {
						    			val alphabets = ('A'..'Z').toList()
						    			val numbers = (0..9).toList()
						
									    while (true) {
									        val randomChars = (1..3).map { alphabets.random() }
									        val randomNumbers = (1..3).map { numbers.random() }
									        val randomString = (randomChars + randomNumbers).joinToString("")
						
								    	    if (!existingMap.containsKey(randomString)) {
									            return randomString
								    	    }
						    			}
									}
						if( checkMsgContent( Term.createTerm("storerequest(FW)"), Term.createTerm("storerequest(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  CurrentColdRoom + payloadArg(1).toInt() <= MAXW  
								 ){CurrentTime = getCurrentTime()
									CurrentTicket = generateNextTicket(TicketMap)
													TicketMap.put(CurrentTicket, Pair(payloadArg(1).toFloat(), CurrentTime)) 
													TicketList.add(CurrentTicket)
								CommUtils.outblack("CSS | Accepted request for ${payloadArg(1)} kilograms")
								answer("storerequest", "storereply", "storereply($CurrentTicket,OK)"   )  
								}
								else
								 {CommUtils.outblack("CSS | Rejected request for ${payloadArg(1)} kilograms, not enough space")
								 answer("storerequest", "storereply", "storereply(NULL,REJ)"   )  
								  ReqRejected += 1  
								 emit("rejrequpdate", "rejrequpdate($ReqRejected)" ) 
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("elabCodeentered") { //this:State
					action { //it:State
						 var Elapsed = 0L  
						if( checkMsgContent( Term.createTerm("codeentered(TICKET)"), Term.createTerm("codeentered(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TicketStart = TicketMap.get(payloadArg(1))!!.second  
								Elapsed = getDuration(TicketStart)
								if(  Elapsed > TICKETTIME * 1000  
								 ){ TicketMap.remove(payloadArg(1))  
								answer("codeentered", "ticketreply", "ticketreply(NULL,REJ)"   )  
								 ReqRejected += 1  
								emit("rejrequpdate", "rejrequpdate($ReqRejected)" ) 
								CommUtils.outblack("CSS | Rejected code confirmation, ticket ${payloadArg(1)} has expired")
								}
								else
								 { var CurrentFW = TicketMap.get(payloadArg(1))!!.first  
								 answer("codeentered", "ticketreply", "ticketreply(${payloadArg(1)},OK)"   )  
								 forward("newcharge", "newcharge($CurrentFW)" ,"transporttrolley" ) 
								 CommUtils.outblack("CSS | Accepted code confirmation for ticket ${payloadArg(1)}")
								  CurrentColdRoom += payloadArg(1).toFloat()  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("elabChargetaken") { //this:State
					action { //it:State
						 var CurrentTicketServed = TicketList.removeAt(0)  
						forward("chargetaken", "chargetaken($CurrentTicketServed)" ,"serviceaccessgui" ) 
						 TicketMap.remove(CurrentTicketServed)  
						CommUtils.outblack("CSS | TransportTrolley has taken current load")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("elabChargedeposited") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("chargedeposited(FW)"), Term.createTerm("chargedeposited(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("CSS | TranportTrolley has deposited ${payloadArg(1)} kilograms in the ColdRoom")
								emit("coldroomupdate", "coldroomupdate($CurrentColdRoom)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
