/* Generated by AN DISI Unibo */ 
package it.unibo.servicestatusgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Servicestatusgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var TTState: MState = MState.HOME
				var TTPos: Pair<Int,Int> = Pair(0,0)
				var CRWeight: Float = 0f
				var RejReq: Int = 0
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitUpdate", cond=doswitch() )
				}	 
				state("waitUpdate") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="updateColdRoom",cond=whenEvent("coldroomupdate"))
					transition(edgeName="t021",targetState="updateRejected",cond=whenEvent("rejrequpdate"))
					transition(edgeName="t022",targetState="updateTT",cond=whenEvent("statusupdate"))
				}	 
				state("updateColdRoom") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("coldroomupdate(KG)"), Term.createTerm("coldroomupdate(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CRWeight = payloadArg(1).toFloat()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="printNewStatus", cond=doswitch() )
				}	 
				state("updateTT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("statusupdate(POS,STATE)"), Term.createTerm("statusupdate(POS,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									TTState = MState.valueOf(payloadArg(2))  
								if(  !payloadArg(1).contains("N")  
								 ){ TTPos = toPair(payloadArg(1))  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="printNewStatus", cond=doswitch() )
				}	 
				state("updateRejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("rejrequpdate(NREJ)"), Term.createTerm("rejrequpdate(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RejReq = payloadArg(1).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="printNewStatus", cond=doswitch() )
				}	 
				state("printNewStatus") { //this:State
					action { //it:State
						CommUtils.outblack("SSG | Status update:")
						CommUtils.outblack("Transport Trolley ($TTState, $TTPos)")
						CommUtils.outblack("ColdRoom = $CRWeight KG")
						CommUtils.outblack("Requests rejected = $RejReq")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitUpdate", cond=doswitch() )
				}	 
			}
		}
} 
