/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobotsim

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Basicrobotsim ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleToINDOOR",cond=whenDispatch("goToINDOOR"))
				}	 
				state("handleToINDOOR") { //this:State
					action { //it:State
						delay(3000) 
						forward("arrivedINDOOR", "arrivedINDOOR(arg)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="inINDOOR", cond=doswitch() )
				}	 
				state("inINDOOR") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleToColdRoom",cond=whenDispatch("goToColdRoom"))
				}	 
				state("handleToColdRoom") { //this:State
					action { //it:State
						delay(3000) 
						forward("arrivedColdRoom", "arrivedColdRoom(arg)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="inColdRoom", cond=doswitch() )
				}	 
				state("inColdRoom") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="goingHOME",cond=whenDispatch("goToHOME"))
				}	 
				state("goingHOME") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_goingHOME", 
				 	 					  scope, context!!, "local_tout_basicrobotsim_goingHOME", 3000.toLong() )
					}	 	 
					 transition(edgeName="t07",targetState="inHome",cond=whenTimeout("local_tout_basicrobotsim_goingHOME"))   
					transition(edgeName="t08",targetState="handleToINDOOR",cond=whenDispatch("goToINDOOR"))
				}	 
				state("inHome") { //this:State
					action { //it:State
						forward("arrivedHOME", "arrivedHOME(arg)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
