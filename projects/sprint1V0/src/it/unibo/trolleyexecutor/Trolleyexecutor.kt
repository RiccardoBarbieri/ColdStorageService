/* Generated by AN DISI Unibo */ 
package it.unibo.trolleyexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolleyexecutor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var isMoving = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: trolleyexecutor initialized")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						request("engage", "engage(trolleyexecutor,300)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="setState",cond=whenReply("engagedone"))
					transition(edgeName="t020",targetState="engageFail",cond=whenReply("engagerefused"))
				}	 
				state("engageFail") { //this:State
					action { //it:State
						 val ErrorString = "Ingaggio robot fallito"  
						forward("fail", "fail($ErrorString)" ,"transporttrolley" ) 
						CommUtils.outmagenta("TE: engage with robot failed, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("moveFail") { //this:State
					action { //it:State
						answer("move", "movefailed", "movefailed(arg)"   )  
						CommUtils.outmagenta("TE: moverobot failed, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("timeout") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: connection with basicrobot timed out")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("setState") { //this:State
					action { //it:State
						forward("setrobotstate", "setpos(0,0,d)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: waiting $isMoving")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="move",cond=whenRequest("move"))
					transition(edgeName="t022",targetState="askPosition",cond=whenRequest("getposition"))
				}	 
				state("move") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: move")
						if( checkMsgContent( Term.createTerm("move(X,Y)"), Term.createTerm("move(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									val X = payloadArg(0)
												val Y = payloadArg(1)
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
								 isMoving = true  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t023",targetState="moveCompleted",cond=whenReply("moverobotdone"))
					transition(edgeName="t024",targetState="moveFail",cond=whenReply("moverobotfailed"))
					transition(edgeName="t025",targetState="stopAskPos",cond=whenRequest("getposition"))
				}	 
				state("moveCompleted") { //this:State
					action { //it:State
						 isMoving = false  
						CommUtils.outmagenta("TE: moveCompleted")
						answer("move", "movedone", "movedone(arg)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("stopAskPos") { //this:State
					action { //it:State
						discardMessages = true
						CommUtils.outmagenta("TE: stopAskPos")
						emit("alarm", "alarm(arg)" ) 
						 isMoving = false  
						request("getrobotstate", "getrobotstate(arg)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_stopAskPos", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_stopAskPos", 30000.toLong() )
					}	 	 
					 transition(edgeName="t026",targetState="timeout",cond=whenTimeout("local_tout_trolleyexecutor_stopAskPos"))   
					transition(edgeName="t027",targetState="sendPosition",cond=whenReply("robotstate"))
				}	 
				state("askPosition") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: askPosition")
						request("getrobotstate", "getrobotstate(arg)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_askPosition", 
				 	 					  scope, context!!, "local_tout_trolleyexecutor_askPosition", 30000.toLong() )
					}	 	 
					 transition(edgeName="t028",targetState="timeout",cond=whenTimeout("local_tout_trolleyexecutor_askPosition"))   
					transition(edgeName="t029",targetState="sendPosition",cond=whenReply("robotstate"))
				}	 
				state("sendPosition") { //this:State
					action { //it:State
						CommUtils.outmagenta("TE: sendPosition")
						if( checkMsgContent( Term.createTerm("robotstate(POS,DIR)"), Term.createTerm("robotstate(POS,DIR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									val position = utils.PosUtils.posStringToPair(payloadArg(0).trim())
												
												val X = position.first
												val Y = position.second
								answer("getposition", "position", "position($X,$Y)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
