/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("doDeposit") { //this:State
					action { //it:State
						forward("step", "step(_)" ,"basicrobot" ) 
						forward("cmd", "cmd(_)" ,"basicrobot" ) 
						forward("ledupdate", "ledupdate(_)" ,"warningdevice" ) 
						forward("statusupdate", "updategui(_)" ,"servicestatusgui" ) 
						delay(3000) 
						forward("chargetakentt", "chargetakentt(_)" ,"coldstorageservice" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						forward("statusupdate", "statusupdate(_)" ,"servicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_waiting", 
				 	 					  scope, context!!, "local_tout_transporttrolley_waiting", 2000.toLong() )
					}	 	 
					 transition(edgeName="t03",targetState="waiting",cond=whenTimeout("local_tout_transporttrolley_waiting"))   
					transition(edgeName="t04",targetState="doDeposit",cond=whenDispatch("deposit"))
					transition(edgeName="t05",targetState="stop",cond=whenDispatch("stop"))
				}	 
				state("stop") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="resume",cond=whenDispatch("resume"))
				}	 
				state("resume") { //this:State
					action { //it:State
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
