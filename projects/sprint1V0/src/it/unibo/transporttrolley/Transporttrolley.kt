/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			val landmarkConf = utils.MapUtils.loadMapConfiguration("servicearea")
				var Anywhere: Pair<Int, Int> = Pair(0,0)
				
				val HomeToIndoorCoord = landmarkConf.getCoordinateClosestToFor("I", Pair(0,0))
				val IndoorToPortCoord = landmarkConf.getCoordinateClosestToFor("P", HomeToIndoorCoord)
				val PortToHomeCoord = landmarkConf.getCoordinateClosestToFor("H", IndoorToPortCoord)
				val PortToIndoorCoord = landmarkConf.getCoordinateClosestToFor("I", IndoorToPortCoord)
				
				val depositQueue: java.util.Queue<Int> = java.util.LinkedList<Int>()
				
				var returnHome: Boolean = false
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: started")
						request("engage", "engage(transporttrolley,300)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="setRobot",cond=whenReply("engagedone"))
					transition(edgeName="t04",targetState="engageFailed",cond=whenReply("engagerefused"))
				}	 
				state("engageFailed") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: contact with basicrobot failed on engage, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("moveFailed") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: contact with basicrobot failed on moverobot, try restarting the application")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("timeout") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: connection with basicrobot timed out")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("setRobot") { //this:State
					action { //it:State
						forward("setrobotstate", "setpos(0,0,d)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: waiting for new deposit request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="moveToIndoorFromHome",cond=whenDispatch("deposit"))
				}	 
				state("queueDeposit") { //this:State
					action { //it:State
							depositQueue.add(0)
						CommUtils.outgreen("TT: added deposit request to queue")
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("stopAndRestart") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: stopping basicrobot")
						emit("alarm", "alarm(arg)" ) 
						request("getrobotstate", "getrobotstate(arg)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_stopAndRestart", 
				 	 					  scope, context!!, "local_tout_transporttrolley_stopAndRestart", 5000.toLong() )
					}	 	 
					 transition(edgeName="t06",targetState="timeout",cond=whenTimeout("local_tout_transporttrolley_stopAndRestart"))   
					transition(edgeName="t07",targetState="moveToIndoorFromAnywhere",cond=whenReply("robotstate"))
				}	 
				state("moveToIndoorFromAnywhere") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("robotstate(POS,DIR)"), Term.createTerm("robotstate(pos(X,Y),D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									Anywhere = utils.PosUtils.posStringToPair(payloadArg(0).trim())
												
												val AnywhereToIndoorCoord = landmarkConf.getCoordinateClosestToFor("I", Anywhere)
												
												val X = AnywhereToIndoorCoord.first
												val Y = AnywhereToIndoorCoord.second
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						}
						CommUtils.outgreen("TT: new request, returning to indoor")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_moveToIndoorFromAnywhere", 
				 	 					  scope, context!!, "local_tout_transporttrolley_moveToIndoorFromAnywhere", 5000.toLong() )
					}	 	 
					 transition(edgeName="t08",targetState="timeout",cond=whenTimeout("local_tout_transporttrolley_moveToIndoorFromAnywhere"))   
					transition(edgeName="t09",targetState="takeCharge",cond=whenReply("moverobotdone"))
					transition(edgeName="t010",targetState="moveFailed",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t011",targetState="queueDeposit",cond=whenDispatch("deposit"),interruptedStateTransitions)
				}	 
				state("moveToIndoorFromHome") { //this:State
					action { //it:State
							val X = HomeToIndoorCoord.first
									val Y = HomeToIndoorCoord.second
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						CommUtils.outgreen("TT: moving robot to indoor")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_moveToIndoorFromHome", 
				 	 					  scope, context!!, "local_tout_transporttrolley_moveToIndoorFromHome", 30000.toLong() )
					}	 	 
					 transition(edgeName="t012",targetState="timeout",cond=whenTimeout("local_tout_transporttrolley_moveToIndoorFromHome"))   
					transition(edgeName="t013",targetState="takeCharge",cond=whenReply("moverobotdone"))
					transition(edgeName="t014",targetState="moveFailed",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t015",targetState="queueDeposit",cond=whenDispatch("deposit"),interruptedStateTransitions)
				}	 
				state("takeCharge") { //this:State
					action { //it:State
						CommUtils.outgreen("TT: loading charge")
						delay(1000) 
						CommUtils.outgreen("TT: charge loaded")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="chargeTaken", cond=doswitch() )
				}	 
				state("chargeTaken") { //this:State
					action { //it:State
						forward("chargetakentt", "chargetakentt" ,"coldstorageservice" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="toPort", cond=doswitch() )
				}	 
				state("toPort") { //this:State
					action { //it:State
							val X = IndoorToPortCoord.first
									val Y = IndoorToPortCoord.second
						CommUtils.outgreen("TT: moving to access port")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_toPort", 
				 	 					  scope, context!!, "local_tout_transporttrolley_toPort", 30000.toLong() )
					}	 	 
					 transition(edgeName="t016",targetState="timeout",cond=whenTimeout("local_tout_transporttrolley_toPort"))   
					transition(edgeName="t017",targetState="depositInColdRoom",cond=whenReply("moverobotdone"))
					transition(edgeName="t018",targetState="moveFailed",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t019",targetState="queueDeposit",cond=whenDispatch("deposit"),interruptedStateTransitions)
				}	 
				state("depositInColdRoom") { //this:State
					action { //it:State
						delay(1000) 
						forward("chargedeposited", "chargedeposited(arg)" ,"coldstorageservice" ) 
						CommUtils.outgreen("TT: charge deposited")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="checkQueueOrReturn", cond=doswitch() )
				}	 
				state("checkQueueOrReturn") { //this:State
					action { //it:State
							returnHome = (depositQueue.size == 0)  
						if(  returnHome  
						 ){	val X = PortToHomeCoord.first
										val Y = PortToHomeCoord.second
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						CommUtils.outgreen("TT: no queued requests, returning to home")
						}
						else
						 {	depositQueue.remove()
						 				val X = PortToIndoorCoord.first
						 				val Y = PortToIndoorCoord.second
						 request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						 CommUtils.outgreen("TT: managing queued request, returning to indoor")
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="stopAndRestart",cond=whenDispatch("deposit"))
					transition(edgeName="t021",targetState="waiting",cond=whenReplyGuarded("moverobotdone",{ returnHome  
					}))
					transition(edgeName="t022",targetState="takeCharge",cond=whenReplyGuarded("moverobotdone",{ !returnHome  
					}))
					transition(edgeName="t023",targetState="moveFailed",cond=whenReply("moverobotfailed"))
				}	 
			}
		}
}
