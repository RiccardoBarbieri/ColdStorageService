/* Generated by AN DISI Unibo */ 
package it.unibo.ticketmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Ticketmanager ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			val ticketManager: ticket.TicketManager = ticket.TicketManager()
				val TICKETTIME = 10
				
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="generateTicket",cond=whenRequest("generateticket"))
					transition(edgeName="t01",targetState="validateTicket",cond=whenRequest("insertticket"))
				}	 
				state("generateTicket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("generateticket(FW)"), Term.createTerm("generateticket(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val NewTicket = ticketManager.generateTicket(payloadArg(0).toFloat())  
								answer("generateticket", "ticket", "ticket($NewTicket)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("validateTicket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("insertticket(TICKET)"), Term.createTerm("insertticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  ticketManager.checkTicketValidity(payloadArg(0), System.currentTimeMillis(), TICKETTIME*1000L)  
								 ){answer("insertticket", "ticketaccepted", "ticketaccepted(arg)"   )  
								}
								else
								 {answer("insertticket", "ticketrejected", "ticketrejected(arg)"   )  
								 }
								forward("initdeposit", "initdeposit(${payloadArg(0)})" ,"coldstorageservice" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
} 
