/* Generated by AN DISI Unibo */ 
package it.unibo.alarmdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlin.random.Random

class Alarmdevice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var DLIMT: Float = 10f
				var Stopped = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(5000) 
						if(  (Random.nextFloat() * (0 - 50) + 50 <= DLIMT) && !Stopped
						 ){forward("stop", "stop(arg)" ,"transporttrolley" ) 
						 Stopped = true  
						}
						if(  (Random.nextFloat() * (0 - 50) + 50 > DLIMT) && Stopped  
						 ){forward("resume", "resume(arg)" ,"transporttrolley" ) 
						 Stopped = false  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
